#!/usr/bin/env python
# coding=utf-8

import os
import sys
import shutil

sys.path.append(os.path.join(os.path.dirname(__file__), 'bin.symlink'))
from myio import IO


class Action(object):

    OVERWRITE = 'o'
    OVERWRITE_ALL = 'O'
    SKIP = 's'
    SKIP_ALL = 'S'
    BACKUP = 'b'
    BACKUP_ALL = 'B'
    ABORT = 'a'


def check_work_dir():
    return os.getcwd() == os.path.dirname(os.path.realpath(__file__))


def get_symlink_source_dest(symlink):
    source = os.path.realpath(symlink)
    dest = os.path.join(os.environ.get('HOME'), symlink[:-len('.symlink')])

    return source, dest


def main():
    IO.info('Checking working directory...')
    if check_work_dir():
        IO.success('OK!\n')
    else:
        IO.error("ಠ_ಠ Don't do that, man...",
                 "Run the script from its directory.")

    overwrite_all = False
    skip_all = False
    backup_all = False

    for file_ in os.listdir('.'):
        if not file_.endswith('.symlink'):
            continue

        source, dest = get_symlink_source_dest(file_)

        if os.path.exists(dest):
            overwrite = False
            skip = False
            backup = False

            if not overwrite_all and not skip_all and not backup_all:
                IO.info("Cannot create a symlink. Destination file already exists: $dest")

                action = None
                while not action:
                    action = IO.user("(o)overwrite, (O)verwrite all, (s)kip, (S)kip all, (b)ackup, (B)ackup all, (a)bort?")

                    if action == Action.OVERWRITE:
                        overwrite = True
                    elif action == Action.OVERWRITE_ALL:
                        overwrite_all = True
                    elif action == Action.SKIP:
                        skip = True
                    elif action == Action.SKIP_ALL:
                        skip_all = True
                    elif action == Action.BACKUP:
                        backup = True
                    elif action == Action.BACKUP_ALL:
                        backup_all = True
                    elif action == Action.ABORT:
                        sys.exit()
                    else:
                        action = None

            if overwrite or overwrite_all:
                IO.info('Removing %s' % dest)
                try:
                    if os.path.islink(dest):
                        os.remove(dest)
                    else:
                        shutil.rmtree(dest)
                except OSError as exc:
                    IO.warning("Cannot remove %s" % dest)
                    skip = True

            if backup or backup_all:
                IO.info('Moving %s -> %s.backup' % (dest, dest))
                try:
                    shutil.move(source, '%s.backup' % dest)
                except OSError:
                    IO.warning("Cannot move %s -> %s" % (source, dest))
                    skip = True

            if skip or skip_all:
                IO.info('Skipping %s' % source)
            else:
                IO.info('Creating symlink %s -> %s' % (source, dest))
                os.symlink(source, dest)
        else:
            IO.info('Creating symlink %s -> %s' % (source, dest))
            os.symlink(source, dest)

        IO.info()

    IO.success("Boom! New dotfiles installed!",
               "Settings will be loaded by default in every new terminal tab.",
               "To activate the dotfiles in this tab, simply run:",
               "    source ~/.bashrc")


if __name__ == '__main__':
    main()
